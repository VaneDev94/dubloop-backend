def calculate_credits(
    enable_lip_sync: bool,
    enable_subtitles: bool,
    enable_audio_enhancement: bool
) -> int:
    """
    Calcula los cr√©ditos necesarios seg√∫n las funciones opcionales seleccionadas.
    """
    credits = 0

    if enable_lip_sync:
        credits += 100  # üíã Sincronizaci√≥n labial

    if enable_subtitles:
        credits += 50   # üìù Generaci√≥n de subt√≠tulos

    if enable_audio_enhancement:
        credits += 30   # üéß Mejora de audio

    return credits


def get_total_credits_for_user(user) -> int:
    """
    Devuelve la cantidad total de cr√©ditos que tiene un usuario.
    """
    return user.credits if hasattr(user, "credits") else 0


#funci√≥n para deducir cr√©ditos
def deduct_credits(user, amount: int):
    """
    Resta cr√©ditos al usuario si tiene suficientes.
    Lanza excepci√≥n si no tiene cr√©ditos suficientes.
    """
    if user.credits < amount:
        raise ValueError("No tienes suficientes cr√©ditos.")
    user.credits -= amount
def check_and_consume_credits(user, cost: int):
    """
    Verifica si el usuario tiene cr√©ditos suficientes y los descuenta.
    Lanza una excepci√≥n si no tiene suficientes cr√©ditos.
    """
    if get_total_credits_for_user(user) < cost:
        raise ValueError("No tienes cr√©ditos suficientes.")
    deduct_credits(user, cost)

def estimate_credits(
    enable_lip_sync: bool,
    enable_subtitles: bool,
    enable_audio_enhancement: bool
) -> int:
    """
    Estima los cr√©ditos que se usar√°n para una operaci√≥n dada sin aplicarlos.
    """
    return calculate_credits(
        enable_lip_sync=enable_lip_sync,
        enable_subtitles=enable_subtitles,
        enable_audio_enhancement=enable_audio_enhancement
    )

def add_credits_to_user(user, amount: int):
    """
    A√±ade una cantidad espec√≠fica de cr√©ditos al usuario.
    """
    if not hasattr(user, "credits"):
        raise AttributeError("El usuario no tiene atributo 'credits'")
    user.credits += amount